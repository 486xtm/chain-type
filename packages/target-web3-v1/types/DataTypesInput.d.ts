/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  TransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface DataTypesInput extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DataTypesInput;
  clone(): DataTypesInput;
  methods: {
    input_address(input1: string): TransactionObject<string>;

    input_bool(input1: boolean): TransactionObject<boolean>;

    input_bytes(input1: string | number[]): TransactionObject<string>;

    input_bytes1(input1: string | number[]): TransactionObject<string>;

    input_enum(input1: number | string): TransactionObject<string>;

    input_int256(input1: number | string): TransactionObject<string>;

    input_int8(input1: number | string): TransactionObject<string>;

    input_stat_array(input1: (number | string)[]): TransactionObject<string[]>;

    input_string(input1: string): TransactionObject<string>;

    input_struct(
      input1: [number | string, number | string]
    ): TransactionObject<[string, string]>;

    input_tuple(
      input1: number | string,
      input2: number | string
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    input_uint256(input1: number | string): TransactionObject<string>;

    input_uint8(input1: number | string): TransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
