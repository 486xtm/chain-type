/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Event1 = ContractEventLog<{
  value1: string;
  value2: string;
  0: string;
  1: string;
}>;

export interface Events extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Events;
  clone(): Events;
  methods: {
    emit_anon1(): NonPayableTransactionObject<void>;

    emit_event1(): NonPayableTransactionObject<void>;
  };
  events: {
    Event1(cb?: Callback<Event1>): EventEmitter;
    Event1(options?: EventOptions, cb?: Callback<Event1>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Event1", cb: Callback<Event1>): void;
  once(event: "Event1", options: EventOptions, cb: Callback<Event1>): void;
}
