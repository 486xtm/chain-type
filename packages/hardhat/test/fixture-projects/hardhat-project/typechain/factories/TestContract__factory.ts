/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestContract, TestContractInterface } from "../TestContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x60806040526040518060400160405280600b81526020017f706c616365686f6c6465720000000000000000000000000000000000000000008152506002908051906020019061004f9291906100a0565b5034801561005c57600080fd5b5060405161018a38038061018a8339818101604052602081101561007f57600080fd5b8101908080519060200190929190505050601481016001819055505061013d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e157805160ff191683800117855561010f565b8280016001018555821561010f579182015b8281111561010e5782518255916020019190600101906100f3565b5b50905061011c9190610120565b5090565b5b80821115610139576000816000905550600101610121565b5090565b603f8061014b6000396000f3fe6080604052600080fdfea2646970667358221220b2ef381f842884307a3ecde6149a35f9c72dfba87e9e7de7c55ef8b2bee6fa7064736f6c63430007030033";

export class TestContract__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestContract> {
    return super.deploy(_amount, overrides || {}) as Promise<TestContract>;
  }
  getDeployTransaction(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_amount, overrides || {});
  }
  attach(address: string): TestContract {
    return super.attach(address) as TestContract;
  }
  connect(signer: Signer): TestContract__factory {
    return super.connect(signer) as TestContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestContractInterface {
    return new utils.Interface(_abi) as TestContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestContract {
    return new Contract(address, _abi, signerOrProvider) as TestContract;
  }
}
