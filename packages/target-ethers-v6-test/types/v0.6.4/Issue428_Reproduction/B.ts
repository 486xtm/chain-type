/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
} from "ethers";
import type { AddressLike } from "ethers/address";
import type { ContractRunner } from "ethers/providers";
import type { ContractMethod } from "ethers/contract";
import type { Listener } from "ethers/utils";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
} from "../../common";

export interface BInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "Committed(uint256)" | "Committed(address[])"
  ): EventFragment;
}

export namespace Committed_uint256_Event {
  export type InputTuple = [timelock: BigNumberish];
  export type OutputTuple = [timelock: bigint];
  export interface OutputObject {
    timelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
}

export namespace Committed_address_array_Event {
  export type InputTuple = [whitelist: AddressLike[]];
  export type OutputTuple = [whitelist: string[]];
  export interface OutputObject {
    whitelist: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
}

export interface B extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: BInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "Committed(uint256)"
  ): TypedContractEvent<
    Committed_uint256_Event.InputTuple,
    Committed_uint256_Event.OutputTuple,
    Committed_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Committed(address[])"
  ): TypedContractEvent<
    Committed_address_array_Event.InputTuple,
    Committed_address_array_Event.OutputTuple,
    Committed_address_array_Event.OutputObject
  >;

  filters: {
    "Committed(uint256)": TypedContractEvent<
      Committed_uint256_Event.InputTuple,
      Committed_uint256_Event.OutputTuple,
      Committed_uint256_Event.OutputObject
    >;
    "Committed(address[])": TypedContractEvent<
      Committed_address_array_Event.InputTuple,
      Committed_address_array_Event.OutputTuple,
      Committed_address_array_Event.OutputObject
    >;
  };
}
