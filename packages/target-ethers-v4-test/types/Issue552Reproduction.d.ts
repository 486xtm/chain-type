/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface Issue552ReproductionInterface extends Interface {
  functions: {
    bars: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    input: TypedFunctionDescription<{
      encode([values]: [BigNumberish[]]): string;
    }>;

    makeObservation: TypedFunctionDescription<{
      encode([barId, newVal]: [BigNumberish, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class Issue552Reproduction extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Issue552Reproduction;
  attach(addressOrName: string): Issue552Reproduction;
  deployed(): Promise<Issue552Reproduction>;

  on(event: EventFilter | string, listener: Listener): Issue552Reproduction;
  once(event: EventFilter | string, listener: Listener): Issue552Reproduction;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): Issue552Reproduction;
  removeAllListeners(eventName: EventFilter | string): Issue552Reproduction;
  removeListener(eventName: any, listener: Listener): Issue552Reproduction;

  interface: Issue552ReproductionInterface;

  functions: {
    bars(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        ([BigNumber, BigNumber] & {
          val: BigNumber;
          blockTimestamp: BigNumber;
        })[],
        number
      ] & {
        observations: ([BigNumber, BigNumber] & {
          val: BigNumber;
          blockTimestamp: BigNumber;
        })[];
        index: number;
      }
    >;

    "bars(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [
        ([BigNumber, BigNumber] & {
          val: BigNumber;
          blockTimestamp: BigNumber;
        })[],
        number
      ] & {
        observations: ([BigNumber, BigNumber] & {
          val: BigNumber;
          blockTimestamp: BigNumber;
        })[];
        index: number;
      }
    >;

    input(
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<void>;

    "input(uint256[10])"(
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<void>;

    makeObservation(
      barId: BigNumberish,
      newVal: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "makeObservation(uint256,uint256)"(
      barId: BigNumberish,
      newVal: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;
  };

  bars(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [
      ([BigNumber, BigNumber] & {
        val: BigNumber;
        blockTimestamp: BigNumber;
      })[],
      number
    ] & {
      observations: ([BigNumber, BigNumber] & {
        val: BigNumber;
        blockTimestamp: BigNumber;
      })[];
      index: number;
    }
  >;

  "bars(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [
      ([BigNumber, BigNumber] & {
        val: BigNumber;
        blockTimestamp: BigNumber;
      })[],
      number
    ] & {
      observations: ([BigNumber, BigNumber] & {
        val: BigNumber;
        blockTimestamp: BigNumber;
      })[];
      index: number;
    }
  >;

  input(values: BigNumberish[], overrides?: UnsignedTransaction): Promise<void>;

  "input(uint256[10])"(
    values: BigNumberish[],
    overrides?: UnsignedTransaction
  ): Promise<void>;

  makeObservation(
    barId: BigNumberish,
    newVal: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "makeObservation(uint256,uint256)"(
    barId: BigNumberish,
    newVal: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    bars(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "bars(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    input(
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "input(uint256[10])"(
      values: BigNumberish[],
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    makeObservation(
      barId: BigNumberish,
      newVal: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "makeObservation(uint256,uint256)"(
      barId: BigNumberish,
      newVal: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
