/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface BInterface extends Interface {
  functions: {};

  events: {
    Committed: TypedEventDescription<{
      encodeTopics([timelock]: [null]): string[];
    }>;
  };
}

export class B extends Contract {
  connect(signerOrProvider: Signer | Provider | string): B;
  attach(addressOrName: string): B;
  deployed(): Promise<B>;

  on(event: EventFilter | string, listener: Listener): B;
  once(event: EventFilter | string, listener: Listener): B;
  addListener(eventName: EventFilter | string, listener: Listener): B;
  removeAllListeners(eventName: EventFilter | string): B;
  removeListener(eventName: any, listener: Listener): B;

  interface: BInterface;

  functions: {};

  filters: {
    Committed(timelock: null): EventFilter;
  };

  estimate: {};
}
