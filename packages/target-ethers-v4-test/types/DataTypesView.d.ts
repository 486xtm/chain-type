/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface DataTypesViewInterface extends Interface {
  functions: {
    view_address: TypedFunctionDescription<{ encode([]: []): string }>;

    view_bool: TypedFunctionDescription<{ encode([]: []): string }>;

    view_bytes: TypedFunctionDescription<{ encode([]: []): string }>;

    view_bytes1: TypedFunctionDescription<{ encode([]: []): string }>;

    view_enum: TypedFunctionDescription<{ encode([]: []): string }>;

    view_int256: TypedFunctionDescription<{ encode([]: []): string }>;

    view_int8: TypedFunctionDescription<{ encode([]: []): string }>;

    view_named: TypedFunctionDescription<{ encode([]: []): string }>;

    view_stat_array: TypedFunctionDescription<{ encode([]: []): string }>;

    view_string: TypedFunctionDescription<{ encode([]: []): string }>;

    view_struct: TypedFunctionDescription<{ encode([]: []): string }>;

    view_tuple: TypedFunctionDescription<{ encode([]: []): string }>;

    view_uint256: TypedFunctionDescription<{ encode([]: []): string }>;

    view_uint8: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class DataTypesView extends Contract {
  connect(signerOrProvider: Signer | Provider | string): DataTypesView;
  attach(addressOrName: string): DataTypesView;
  deployed(): Promise<DataTypesView>;

  on(event: EventFilter | string, listener: Listener): DataTypesView;
  once(event: EventFilter | string, listener: Listener): DataTypesView;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): DataTypesView;
  removeAllListeners(eventName: EventFilter | string): DataTypesView;
  removeListener(eventName: any, listener: Listener): DataTypesView;

  interface: DataTypesViewInterface;

  functions: {
    view_address(): Promise<string>;

    "view_address()"(): Promise<string>;

    view_bool(): Promise<boolean>;

    "view_bool()"(): Promise<boolean>;

    view_bytes(): Promise<string>;

    "view_bytes()"(): Promise<string>;

    view_bytes1(): Promise<string>;

    "view_bytes1()"(): Promise<string>;

    view_enum(): Promise<number>;

    "view_enum()"(): Promise<number>;

    view_int256(): Promise<BigNumber>;

    "view_int256()"(): Promise<BigNumber>;

    view_int8(): Promise<number>;

    "view_int8()"(): Promise<number>;

    view_named(): Promise<{
      uint256_1: BigNumber;
      uint256_2: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "view_named()"(): Promise<{
      uint256_1: BigNumber;
      uint256_2: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    view_stat_array(): Promise<number[]>;

    "view_stat_array()"(): Promise<number[]>;

    view_string(): Promise<string>;

    "view_string()"(): Promise<string>;

    view_struct(): Promise<{
      uint256_0: BigNumber;
      uint256_1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "view_struct()"(): Promise<{
      uint256_0: BigNumber;
      uint256_1: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    view_tuple(): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "view_tuple()"(): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    view_uint256(): Promise<BigNumber>;

    "view_uint256()"(): Promise<BigNumber>;

    view_uint8(): Promise<number>;

    "view_uint8()"(): Promise<number>;
  };

  view_address(): Promise<string>;

  "view_address()"(): Promise<string>;

  view_bool(): Promise<boolean>;

  "view_bool()"(): Promise<boolean>;

  view_bytes(): Promise<string>;

  "view_bytes()"(): Promise<string>;

  view_bytes1(): Promise<string>;

  "view_bytes1()"(): Promise<string>;

  view_enum(): Promise<number>;

  "view_enum()"(): Promise<number>;

  view_int256(): Promise<BigNumber>;

  "view_int256()"(): Promise<BigNumber>;

  view_int8(): Promise<number>;

  "view_int8()"(): Promise<number>;

  view_named(): Promise<{
    uint256_1: BigNumber;
    uint256_2: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "view_named()"(): Promise<{
    uint256_1: BigNumber;
    uint256_2: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  view_stat_array(): Promise<number[]>;

  "view_stat_array()"(): Promise<number[]>;

  view_string(): Promise<string>;

  "view_string()"(): Promise<string>;

  view_struct(): Promise<{
    uint256_0: BigNumber;
    uint256_1: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "view_struct()"(): Promise<{
    uint256_0: BigNumber;
    uint256_1: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  view_tuple(): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "view_tuple()"(): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  view_uint256(): Promise<BigNumber>;

  "view_uint256()"(): Promise<BigNumber>;

  view_uint8(): Promise<number>;

  "view_uint8()"(): Promise<number>;

  filters: {};

  estimate: {
    view_address(): Promise<BigNumber>;

    view_bool(): Promise<BigNumber>;

    view_bytes(): Promise<BigNumber>;

    view_bytes1(): Promise<BigNumber>;

    view_enum(): Promise<BigNumber>;

    view_int256(): Promise<BigNumber>;

    view_int8(): Promise<BigNumber>;

    view_named(): Promise<BigNumber>;

    view_stat_array(): Promise<BigNumber>;

    view_string(): Promise<BigNumber>;

    view_struct(): Promise<BigNumber>;

    view_tuple(): Promise<BigNumber>;

    view_uint256(): Promise<BigNumber>;

    view_uint8(): Promise<BigNumber>;
  };
}
