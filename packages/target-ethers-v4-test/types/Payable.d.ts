/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PayableInterface extends Interface {
  functions: {
    non_payable_func: TypedFunctionDescription<{ encode([]: []): string }>;

    payable_func: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class Payable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Payable;
  attach(addressOrName: string): Payable;
  deployed(): Promise<Payable>;

  on(event: EventFilter | string, listener: Listener): Payable;
  once(event: EventFilter | string, listener: Listener): Payable;
  addListener(eventName: EventFilter | string, listener: Listener): Payable;
  removeAllListeners(eventName: EventFilter | string): Payable;
  removeListener(eventName: any, listener: Listener): Payable;

  interface: PayableInterface;

  functions: {
    non_payable_func(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    payable_func(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  non_payable_func(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  payable_func(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    non_payable_func(): Promise<BigNumber>;

    payable_func(): Promise<BigNumber>;
  };
}
