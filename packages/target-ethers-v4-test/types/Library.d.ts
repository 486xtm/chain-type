/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LibraryInterface extends Interface {
  functions: {
    other: TypedFunctionDescription<{ encode([b]: [BigNumberish]): string }>;
  };

  events: {};
}

export class Library extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Library;
  attach(addressOrName: string): Library;
  deployed(): Promise<Library>;

  on(event: EventFilter | string, listener: Listener): Library;
  once(event: EventFilter | string, listener: Listener): Library;
  addListener(eventName: EventFilter | string, listener: Listener): Library;
  removeAllListeners(eventName: EventFilter | string): Library;
  removeListener(eventName: any, listener: Listener): Library;

  interface: LibraryInterface;

  functions: {
    other(b: BigNumberish, overrides?: TransactionOverrides): Promise<number>;

    "other(uint8)"(
      b: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<number>;
  };

  other(b: BigNumberish, overrides?: TransactionOverrides): Promise<number>;

  "other(uint8)"(
    b: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  filters: {};

  estimate: {
    other(
      b: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "other(uint8)"(
      b: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
