/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { UnsignedTransaction } from "ethers/utils/transaction";
import { TypedEventDescription, TypedFunctionDescription } from ".";

interface RarityInterface extends Interface {
  functions: {
    adventure: TypedFunctionDescription<{
      encode([_summoner]: [BigNumberish]): string;
    }>;

    adventurers_log: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([to, tokenId]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{ encode([owner]: [string]): string }>;

    class: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    classes: TypedFunctionDescription<{ encode([id]: [BigNumberish]): string }>;

    getApproved: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    isApprovedForAll: TypedFunctionDescription<{
      encode([owner, operator]: [string, string]): string;
    }>;

    level: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    level_up: TypedFunctionDescription<{
      encode([_summoner]: [BigNumberish]): string;
    }>;

    next_summoner: TypedFunctionDescription<{ encode([]: []): string }>;

    ownerOf: TypedFunctionDescription<{
      encode([tokenId]: [BigNumberish]): string;
    }>;

    safeTransferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string;
    }>;

    setApprovalForAll: TypedFunctionDescription<{
      encode([operator, approved]: [string, boolean]): string;
    }>;

    spend_xp: TypedFunctionDescription<{
      encode([_summoner, _xp]: [BigNumberish, BigNumberish]): string;
    }>;

    summon: TypedFunctionDescription<{
      encode([_class]: [BigNumberish]): string;
    }>;

    summoner: TypedFunctionDescription<{
      encode([_summoner]: [BigNumberish]): string;
    }>;

    tokenByIndex: TypedFunctionDescription<{
      encode([index]: [BigNumberish]): string;
    }>;

    tokenOfOwnerByIndex: TypedFunctionDescription<{
      encode([owner, index]: [string, BigNumberish]): string;
    }>;

    tokenURI: TypedFunctionDescription<{
      encode([_summoner]: [BigNumberish]): string;
    }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transferFrom: TypedFunctionDescription<{
      encode([from, to, tokenId]: [string, string, BigNumberish]): string;
    }>;

    xp: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    xp_required: TypedFunctionDescription<{
      encode([curent_level]: [BigNumberish]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, approved, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    ApprovalForAll: TypedEventDescription<{
      encodeTopics([owner, operator, approved]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, tokenId]: [
        string | null,
        string | null,
        BigNumberish | null
      ]): string[];
    }>;

    leveled: TypedEventDescription<{
      encodeTopics([owner, level, summoner]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    summoned: TypedEventDescription<{
      encodeTopics([owner, _class, summoner]: [
        string | null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class Rarity extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Rarity;
  attach(addressOrName: string): Rarity;
  deployed(): Promise<Rarity>;

  on(event: EventFilter | string, listener: Listener): Rarity;
  once(event: EventFilter | string, listener: Listener): Rarity;
  addListener(eventName: EventFilter | string, listener: Listener): Rarity;
  removeAllListeners(eventName: EventFilter | string): Rarity;
  removeListener(eventName: any, listener: Listener): Rarity;

  interface: RarityInterface;

  functions: {
    adventure(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "adventure(uint256)"(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    adventurers_log(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "adventurers_log(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    class(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "class(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    classes(id: BigNumberish, overrides?: UnsignedTransaction): Promise<string>;

    "classes(uint256)"(
      id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<boolean>;

    level(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "level(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    level_up(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "level_up(uint256)"(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    next_summoner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "next_summoner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    spend_xp(
      _summoner: BigNumberish,
      _xp: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "spend_xp(uint256,uint256)"(
      _summoner: BigNumberish,
      _xp: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    summon(
      _class: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "summon(uint256)"(
      _class: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    summoner(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _xp: BigNumber;
        _log: BigNumber;
        _class: BigNumber;
        _level: BigNumber;
      }
    >;

    "summoner(uint256)"(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _xp: BigNumber;
        _log: BigNumber;
        _class: BigNumber;
        _level: BigNumber;
      }
    >;

    tokenByIndex(
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenURI(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    "tokenURI(uint256)"(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<string>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<ContractTransaction>;

    xp(arg0: BigNumberish, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "xp(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    xp_required(
      curent_level: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "xp_required(uint256)"(
      curent_level: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };

  adventure(
    _summoner: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "adventure(uint256)"(
    _summoner: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  adventurers_log(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "adventurers_log(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: UnsignedTransaction): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  class(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "class(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  classes(id: BigNumberish, overrides?: UnsignedTransaction): Promise<string>;

  "classes(uint256)"(
    id: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: UnsignedTransaction
  ): Promise<boolean>;

  level(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "level(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  level_up(
    _summoner: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "level_up(uint256)"(
    _summoner: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  next_summoner(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "next_summoner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  ownerOf(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  safeTransferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: Arrayish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  spend_xp(
    _summoner: BigNumberish,
    _xp: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "spend_xp(uint256,uint256)"(
    _summoner: BigNumberish,
    _xp: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  summon(
    _class: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "summon(uint256)"(
    _class: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  summoner(
    _summoner: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _xp: BigNumber;
      _log: BigNumber;
      _class: BigNumber;
      _level: BigNumber;
    }
  >;

  "summoner(uint256)"(
    _summoner: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _xp: BigNumber;
      _log: BigNumber;
      _class: BigNumber;
      _level: BigNumber;
    }
  >;

  tokenByIndex(
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  tokenURI(
    _summoner: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  "tokenURI(uint256)"(
    _summoner: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<string>;

  totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

  "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<ContractTransaction>;

  xp(arg0: BigNumberish, overrides?: UnsignedTransaction): Promise<BigNumber>;

  "xp(uint256)"(
    arg0: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  xp_required(
    curent_level: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  "xp_required(uint256)"(
    curent_level: BigNumberish,
    overrides?: UnsignedTransaction
  ): Promise<BigNumber>;

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    leveled(owner: string | null, level: null, summoner: null): EventFilter;

    summoned(owner: string | null, _class: null, summoner: null): EventFilter;
  };

  estimate: {
    adventure(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "adventure(uint256)"(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    adventurers_log(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "adventurers_log(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    balanceOf(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    class(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "class(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    classes(
      id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "classes(uint256)"(
      id: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    level(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "level(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    level_up(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "level_up(uint256)"(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    next_summoner(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "next_summoner()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: Arrayish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    spend_xp(
      _summoner: BigNumberish,
      _xp: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "spend_xp(uint256,uint256)"(
      _summoner: BigNumberish,
      _xp: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    summon(
      _class: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "summon(uint256)"(
      _class: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    summoner(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "summoner(uint256)"(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    tokenURI(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      _summoner: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    totalSupply(overrides?: UnsignedTransaction): Promise<BigNumber>;

    "totalSupply()"(overrides?: UnsignedTransaction): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    xp(arg0: BigNumberish, overrides?: UnsignedTransaction): Promise<BigNumber>;

    "xp(uint256)"(
      arg0: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    xp_required(
      curent_level: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;

    "xp_required(uint256)"(
      curent_level: BigNumberish,
      overrides?: UnsignedTransaction
    ): Promise<BigNumber>;
  };
}
