/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";

export interface DataTypesInputContract
  extends Truffle.Contract<DataTypesInputInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DataTypesInputInstance>;
}

export interface DataTypesPureContract
  extends Truffle.Contract<DataTypesPureInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DataTypesPureInstance>;
}

export interface DataTypesViewContract
  extends Truffle.Contract<DataTypesViewInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DataTypesViewInstance>;
}

export interface EventsContract extends Truffle.Contract<EventsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<EventsInstance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface OverloadsContract extends Truffle.Contract<OverloadsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OverloadsInstance>;
}

export interface PayableContract extends Truffle.Contract<PayableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PayableInstance>;
}

export interface DataTypesInputInstance extends Truffle.ContractInstance {
  input_uint8(
    input1: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  input_uint256(
    input1: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  input_int8(
    input1: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  input_int256(
    input1: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  input_bool(
    input1: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  input_address(
    input1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  input_bytes1(
    input1: string | BigNumber,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  input_bytes(
    input1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  input_string(
    input1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  input_stat_array(
    input1: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber[]>;

  input_tuple(
    input1: number | BigNumber | string,
    input2: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  input_struct(
    input1: {
      uint256_0: number | BigNumber | string;
      uint256_1: number | BigNumber | string;
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ uint256_0: BigNumber; uint256_1: BigNumber }>;

  input_enum(
    input1: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface DataTypesPureInstance extends Truffle.ContractInstance {
  pure_uint8(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  pure_uint256(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  pure_int8(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  pure_int256(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  pure_bool(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  pure_address(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pure_bytes1(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pure_bytes(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pure_string(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pure_stat_array(txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;

  pure_tuple(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  pure_named(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  pure_struct(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ uint256_0: BigNumber; uint256_1: BigNumber }>;

  pure_enum(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface DataTypesViewInstance extends Truffle.ContractInstance {
  view_uint8(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  view_uint256(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  view_int8(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  view_int256(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  view_bool(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  view_address(txDetails?: Truffle.TransactionDetails): Promise<string>;

  view_bytes1(txDetails?: Truffle.TransactionDetails): Promise<string>;

  view_bytes(txDetails?: Truffle.TransactionDetails): Promise<string>;

  view_string(txDetails?: Truffle.TransactionDetails): Promise<string>;

  view_stat_array(txDetails?: Truffle.TransactionDetails): Promise<BigNumber[]>;

  view_tuple(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  view_named(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BigNumber, BigNumber]>;

  view_struct(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ uint256_0: BigNumber; uint256_1: BigNumber }>;

  view_enum(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface EventsInstance extends Truffle.ContractInstance {
  emit_event1: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  emit_event2: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  emit_anon1: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  emit_event3: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  emit_event3_overloaded: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface OverloadsInstance extends Truffle.ContractInstance {
  overload1(
    input1: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BigNumber>;
}

export interface PayableInstance extends Truffle.ContractInstance {
  payable_func: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  non_payable_func: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}
