/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace Issue552_Observer {
  export type ObservationStruct = {
    val: BigNumberish;
    blockTimestamp: BigNumberish;
  };

  export type ObservationStructOutput = [BigNumber, BigNumber] & {
    val: BigNumber;
    blockTimestamp: BigNumber;
  };
}

export declare namespace Issue552_Reproduction {
  export type ObservationParamsStruct = {
    observations: Issue552_Observer.ObservationStruct[];
    index: BigNumberish;
  };

  export type ObservationParamsStructOutput = [
    Issue552_Observer.ObservationStructOutput[],
    number
  ] & {
    observations: Issue552_Observer.ObservationStructOutput[];
    index: number;
  };
}

export interface Issue552_ReproductionInterface extends utils.Interface {
  functions: {
    "bars(uint256)": FunctionFragment;
    "input(uint256[10])": FunctionFragment;
    "makeObservation(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "bars" | "input" | "makeObservation"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bars", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "input",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "makeObservation",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bars", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "input", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeObservation",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Issue552_Reproduction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Issue552_ReproductionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bars(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [Issue552_Reproduction.ObservationParamsStructOutput] & {
        fooObservations: Issue552_Reproduction.ObservationParamsStructOutput;
      }
    >;

    input(values: BigNumberish[], overrides?: CallOverrides): Promise<[void]>;

    makeObservation(
      barId: BigNumberish,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  bars(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Issue552_Reproduction.ObservationParamsStructOutput>;

  input(values: BigNumberish[], overrides?: CallOverrides): Promise<void>;

  makeObservation(
    barId: BigNumberish,
    newVal: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    bars(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Issue552_Reproduction.ObservationParamsStructOutput>;

    input(values: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    makeObservation(
      barId: BigNumberish,
      newVal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bars(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    input(
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeObservation(
      barId: BigNumberish,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bars(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    input(
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeObservation(
      barId: BigNumberish,
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
