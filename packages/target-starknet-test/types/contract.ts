/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Contract, Invocation, EstimateFeeResponse } from "starknet";
import type { BigNumberish } from "starknet/utils/number";
import type { BlockIdentifier } from "starknet/provider/utils";

export type Point = {
  x: BigNumberish;
  y: BigNumberish;
};
export type PointPair = {
  p1: Point;
  p2: Point;
  extra: BigNumberish;
};
export interface contract extends Contract {
  get_felt(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BigNumberish] & { res: BigNumberish }>;
  get_array_of_felts(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[BigNumberish[]] & { res: BigNumberish[] }>;
  get_struct(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[Point] & { res: Point }>;
  get_array_of_structs(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[Point[]] & { res: Point[] }>;
  get_nested_structs(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<[PointPair] & { res: PointPair }>;
  get_tuple(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<
    [[BigNumberish, BigNumberish, BigNumberish]] & {
      res: [BigNumberish, BigNumberish, BigNumberish];
    }
  >;
  get_mixed_types(options?: {
    blockIdentifier?: BlockIdentifier;
  }): Promise<
    [[BigNumberish, BigNumberish], BigNumberish, BigNumberish[], Point] & {
      tuple: [BigNumberish, BigNumberish];
      number: BigNumberish;
      array: BigNumberish[];
      point: Point;
    }
  >;
  request_felt(
    num: BigNumberish,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BigNumberish] & { res: BigNumberish }>;
  request_array_of_felts(
    arr: BigNumberish[],
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BigNumberish[]] & { res: BigNumberish[] }>;
  request_struct(
    str: Point,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Point] & { res: Point }>;
  request_array_of_structs(
    str: Point[],
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[Point[]] & { res: Point[] }>;
  request_nested_structs(
    str: PointPair,
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[PointPair] & { res: PointPair }>;
  request_tuple(
    tup: [BigNumberish, BigNumberish],
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<
    [[BigNumberish, BigNumberish]] & { res: [BigNumberish, BigNumberish] }
  >;
  request_mixed_types(
    num: BigNumberish,
    point: Point,
    arr: BigNumberish[],
    options?: { blockIdentifier?: BlockIdentifier }
  ): Promise<[BigNumberish] & { res: BigNumberish }>;
  functions: {
    get_felt(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BigNumberish] & { res: BigNumberish }>;
    get_array_of_felts(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BigNumberish[]] & { res: BigNumberish[] }>;
    get_struct(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Point] & { res: Point }>;
    get_array_of_structs(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Point[]] & { res: Point[] }>;
    get_nested_structs(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[PointPair] & { res: PointPair }>;
    get_tuple(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<
      [[BigNumberish, BigNumberish, BigNumberish]] & {
        res: [BigNumberish, BigNumberish, BigNumberish];
      }
    >;
    get_mixed_types(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<
      [[BigNumberish, BigNumberish], BigNumberish, BigNumberish[], Point] & {
        tuple: [BigNumberish, BigNumberish];
        number: BigNumberish;
        array: BigNumberish[];
        point: Point;
      }
    >;
    request_felt(
      num: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BigNumberish] & { res: BigNumberish }>;
    request_array_of_felts(
      arr: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BigNumberish[]] & { res: BigNumberish[] }>;
    request_struct(
      str: Point,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Point] & { res: Point }>;
    request_array_of_structs(
      str: Point[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Point[]] & { res: Point[] }>;
    request_nested_structs(
      str: PointPair,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[PointPair] & { res: PointPair }>;
    request_tuple(
      tup: [BigNumberish, BigNumberish],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<
      [[BigNumberish, BigNumberish]] & { res: [BigNumberish, BigNumberish] }
    >;
    request_mixed_types(
      num: BigNumberish,
      point: Point,
      arr: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BigNumberish] & { res: BigNumberish }>;
  };
  callStatic: {
    get_felt(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BigNumberish] & { res: BigNumberish }>;
    get_array_of_felts(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[BigNumberish[]] & { res: BigNumberish[] }>;
    get_struct(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Point] & { res: Point }>;
    get_array_of_structs(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[Point[]] & { res: Point[] }>;
    get_nested_structs(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<[PointPair] & { res: PointPair }>;
    get_tuple(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<
      [[BigNumberish, BigNumberish, BigNumberish]] & {
        res: [BigNumberish, BigNumberish, BigNumberish];
      }
    >;
    get_mixed_types(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<
      [[BigNumberish, BigNumberish], BigNumberish, BigNumberish[], Point] & {
        tuple: [BigNumberish, BigNumberish];
        number: BigNumberish;
        array: BigNumberish[];
        point: Point;
      }
    >;
    request_felt(
      num: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BigNumberish] & { res: BigNumberish }>;
    request_array_of_felts(
      arr: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BigNumberish[]] & { res: BigNumberish[] }>;
    request_struct(
      str: Point,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Point] & { res: Point }>;
    request_array_of_structs(
      str: Point[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[Point[]] & { res: Point[] }>;
    request_nested_structs(
      str: PointPair,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[PointPair] & { res: PointPair }>;
    request_tuple(
      tup: [BigNumberish, BigNumberish],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<
      [[BigNumberish, BigNumberish]] & { res: [BigNumberish, BigNumberish] }
    >;
    request_mixed_types(
      num: BigNumberish,
      point: Point,
      arr: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<[BigNumberish] & { res: BigNumberish }>;
  };
  populateTransaction: {
    get_felt(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    get_array_of_felts(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Invocation;
    get_struct(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    get_array_of_structs(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Invocation;
    get_nested_structs(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Invocation;
    get_tuple(options?: { blockIdentifier?: BlockIdentifier }): Invocation;
    get_mixed_types(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Invocation;
    request_felt(
      num: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    request_array_of_felts(
      arr: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    request_struct(
      str: Point,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    request_array_of_structs(
      str: Point[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    request_nested_structs(
      str: PointPair,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    request_tuple(
      tup: [BigNumberish, BigNumberish],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
    request_mixed_types(
      num: BigNumberish,
      point: Point,
      arr: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Invocation;
  };
  estimateFee: {
    get_felt(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    get_array_of_felts(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    get_struct(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    get_array_of_structs(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    get_nested_structs(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    get_tuple(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    get_mixed_types(options?: {
      blockIdentifier?: BlockIdentifier;
    }): Promise<EstimateFeeResponse>;
    request_felt(
      num: BigNumberish,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    request_array_of_felts(
      arr: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    request_struct(
      str: Point,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    request_array_of_structs(
      str: Point[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    request_nested_structs(
      str: PointPair,
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    request_tuple(
      tup: [BigNumberish, BigNumberish],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
    request_mixed_types(
      num: BigNumberish,
      point: Point,
      arr: BigNumberish[],
      options?: { blockIdentifier?: BlockIdentifier }
    ): Promise<EstimateFeeResponse>;
  };
}
