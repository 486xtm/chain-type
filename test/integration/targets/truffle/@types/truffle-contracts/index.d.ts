/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import { BigNumber } from "bignumber.js";

export interface ContractWithLibraryContract extends Truffle.Contract<ContractWithLibraryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ContractWithLibraryInstance>;
}

export interface DefaultConstructorContract extends Truffle.Contract<DefaultConstructorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DefaultConstructorInstance>;
}

export interface DumbContractContract extends Truffle.Contract<DumbContractInstance> {
  "new"(
    _counter: number | BigNumber | string,
    meta?: Truffle.TransactionDetails,
  ): Promise<DumbContractInstance>;
}

export interface MigrationsContract extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface TestLibraryContract extends Truffle.Contract<TestLibraryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestLibraryInstance>;
}

export interface ContractWithLibraryInstance extends Truffle.ContractInstance {
  val(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  setVal: {
    (_val: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(_val: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _val: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<string>;
    estimateGas(
      _val: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<number>;
  };
}

export interface DefaultConstructorInstance extends Truffle.ContractInstance {
  counter(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;
}

export interface DumbContractInstance extends Truffle.ContractInstance {
  arrayParamLength(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  someAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  counter(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  counterArray(
    arg0: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails,
  ): Promise<BigNumber>;

  SOME_VALUE(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  byteArray(txDetails?: Truffle.TransactionDetails): Promise<string>;

  counterWithOffset(
    offset: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails,
  ): Promise<BigNumber>;

  returnAll(txDetails?: Truffle.TransactionDetails): Promise<[BigNumber, BigNumber]>;

  countup: {
    (offset: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      offset: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<void>;
    sendTransaction(
      offset: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<string>;
    estimateGas(
      offset: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<number>;
  };

  countupWithReturn: {
    (offset: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      offset: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<BigNumber>;
    sendTransaction(
      offset: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<string>;
    estimateGas(
      offset: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<number>;
  };

  returnSigned(
    offset: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails,
  ): Promise<BigNumber>;

  countupForEther: {
    (txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse>;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  twoUnnamedArgs: {
    (
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      ret: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<Truffle.TransactionResponse>;
    call(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      ret: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<BigNumber>;
    sendTransaction(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      ret: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<string>;
    estimateGas(
      arg0: number | BigNumber | string,
      arg1: number | BigNumber | string,
      ret: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<number>;
  };

  callWithArray(
    arrayParam: (number | BigNumber | string)[],
    txDetails?: Truffle.TransactionDetails,
  ): Promise<(BigNumber)[]>;

  callWithBytes(
    byteParam: string | BigNumber,
    txDetails?: Truffle.TransactionDetails,
  ): Promise<string>;

  testAddress(a: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>;

  testString(a: string, txDetails?: Truffle.TransactionDetails): Promise<string>;
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (completed: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<void>;
    sendTransaction(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<string>;
    estimateGas(
      completed: number | BigNumber | string,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<number>;
  };

  upgrade: {
    (new_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(new_address: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      new_address: string | BigNumber,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<string>;
    estimateGas(
      new_address: string | BigNumber,
      txDetails?: Truffle.TransactionDetails,
    ): Promise<number>;
  };
}

export interface TestLibraryInstance extends Truffle.ContractInstance {
  enhanceVal(
    _val: number | BigNumber | string,
    txDetails?: Truffle.TransactionDetails,
  ): Promise<BigNumber>;
}
