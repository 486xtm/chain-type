/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ContractWithStructs extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: ContractOptions);
  clone(): ContractWithStructs;
  methods: {
    getCounter(offset: number | string): TransactionObject<string>;

    getStuff(): TransactionObject<{
      _person: { height: string; name: string; account: string };
      _thing: {
        counter: string;
        mother: { height: string; name: string; account: string };
        father: { height: string; name: string; account: string };
      };
      _things: ({
        things: ({
          counter: string;
          mother: { height: string; name: string; account: string };
          father: { height: string; name: string; account: string };
        })[];
        no: string;
      })[];
      0: { height: string; name: string; account: string };
      1: {
        counter: string;
        mother: { height: string; name: string; account: string };
        father: { height: string; name: string; account: string };
      };
      2: ({
        things: ({
          counter: string;
          mother: { height: string; name: string; account: string };
          father: { height: string; name: string; account: string };
        })[];
        no: string;
      })[];
    }>;

    owner(): TransactionObject<{
      height: string;
      name: string;
      account: string;
      0: string;
      1: string;
      2: string;
    }>;

    increaseCounter(by: number | string): TransactionObject<void>;

    thing(): TransactionObject<{
      counter: string;
      mother: { height: string; name: string; account: string };
      father: { height: string; name: string; account: string };
      0: string;
      1: { height: string; name: string; account: string };
      2: { height: string; name: string; account: string };
    }>;

    setStuff(
      _person: { height: number | string; name: string; account: string },
      _thing: {
        counter: number | string;
        mother: { height: number | string; name: string; account: string };
        father: { height: number | string; name: string; account: string };
      },
    ): TransactionObject<void>;
  };
  events: {
    allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
  };
}
