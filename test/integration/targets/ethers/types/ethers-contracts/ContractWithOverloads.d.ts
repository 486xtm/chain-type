/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { TransactionOverrides, TypedEventDescription, TypedFunctionDescription } from ".";

interface ContractWithOverloadsInterface extends Interface {
  functions: {
    getCounter: TypedFunctionDescription<{ encode([offset]: [BigNumberish]): string }>;

    counter: TypedFunctionDescription<{ encode([]: []): string }>;

    increaseCounter: TypedFunctionDescription<{ encode([by]: [BigNumberish]): string }>;
  };

  events: {};
}

export class ContractWithOverloads extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ContractWithOverloads;
  attach(addressOrName: string): ContractWithOverloads;
  deployed(): Promise<ContractWithOverloads>;

  on(event: EventFilter | string, listener: Listener): ContractWithOverloads;
  once(event: EventFilter | string, listener: Listener): ContractWithOverloads;
  addListener(eventName: EventFilter | string, listener: Listener): ContractWithOverloads;
  removeAllListeners(eventName: EventFilter | string): ContractWithOverloads;
  removeListener(eventName: any, listener: Listener): ContractWithOverloads;

  interface: ContractWithOverloadsInterface;

  functions: {
    getCounter(offset: BigNumberish): Promise<BigNumber>;

    counter(): Promise<BigNumber>;

    increaseCounter(
      by: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;
  };

  getCounter(offset: BigNumberish): Promise<BigNumber>;

  counter(): Promise<BigNumber>;

  increaseCounter(by: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    getCounter(offset: BigNumberish): Promise<BigNumber>;

    counter(): Promise<BigNumber>;

    increaseCounter(by: BigNumberish): Promise<BigNumber>;
  };
}
