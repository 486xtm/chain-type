/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import { TransactionOverrides, TypedEventDescription, TypedFunctionDescription } from ".";

interface ContractWithStructsInterface extends Interface {
  functions: {
    getCounter: TypedFunctionDescription<{ encode([offset]: [BigNumberish]): string }>;

    getStuff: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    increaseCounter: TypedFunctionDescription<{ encode([by]: [BigNumberish]): string }>;

    thing: TypedFunctionDescription<{ encode([]: []): string }>;

    setStuff: TypedFunctionDescription<{
      encode([_person, _thing]: [
        { height: BigNumberish; name: string; account: string },
        {
          counter: BigNumberish;
          mother: { height: BigNumberish; name: string; account: string };
          father: { height: BigNumberish; name: string; account: string };
        }
      ]): string;
    }>;
  };

  events: {};
}

export class ContractWithStructs extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ContractWithStructs;
  attach(addressOrName: string): ContractWithStructs;
  deployed(): Promise<ContractWithStructs>;

  on(event: EventFilter | string, listener: Listener): ContractWithStructs;
  once(event: EventFilter | string, listener: Listener): ContractWithStructs;
  addListener(eventName: EventFilter | string, listener: Listener): ContractWithStructs;
  removeAllListeners(eventName: EventFilter | string): ContractWithStructs;
  removeListener(eventName: any, listener: Listener): ContractWithStructs;

  interface: ContractWithStructsInterface;

  functions: {
    getCounter(offset: BigNumberish): Promise<BigNumber>;

    getStuff(): Promise<{
      _person: { height: BigNumber; name: string; account: string };
      _thing: {
        counter: BigNumber;
        mother: { height: BigNumber; name: string; account: string };
        father: { height: BigNumber; name: string; account: string };
      };
      _things: ({
        things: ({
          counter: BigNumber;
          mother: { height: BigNumber; name: string; account: string };
          father: { height: BigNumber; name: string; account: string };
        })[];
        no: BigNumber;
      })[];
      0: { height: BigNumber; name: string; account: string };
      1: {
        counter: BigNumber;
        mother: { height: BigNumber; name: string; account: string };
        father: { height: BigNumber; name: string; account: string };
      };
      2: ({
        things: ({
          counter: BigNumber;
          mother: { height: BigNumber; name: string; account: string };
          father: { height: BigNumber; name: string; account: string };
        })[];
        no: BigNumber;
      })[];
    }>;

    owner(): Promise<{
      height: BigNumber;
      name: string;
      account: string;
      0: BigNumber;
      1: string;
      2: string;
    }>;

    increaseCounter(
      by: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    thing(): Promise<{
      counter: BigNumber;
      mother: { height: BigNumber; name: string; account: string };
      father: { height: BigNumber; name: string; account: string };
      0: BigNumber;
      1: { height: BigNumber; name: string; account: string };
      2: { height: BigNumber; name: string; account: string };
    }>;

    setStuff(
      _person: { height: BigNumberish; name: string; account: string },
      _thing: {
        counter: BigNumberish;
        mother: { height: BigNumberish; name: string; account: string };
        father: { height: BigNumberish; name: string; account: string };
      },
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;
  };

  getCounter(offset: BigNumberish): Promise<BigNumber>;

  getStuff(): Promise<{
    _person: { height: BigNumber; name: string; account: string };
    _thing: {
      counter: BigNumber;
      mother: { height: BigNumber; name: string; account: string };
      father: { height: BigNumber; name: string; account: string };
    };
    _things: ({
      things: ({
        counter: BigNumber;
        mother: { height: BigNumber; name: string; account: string };
        father: { height: BigNumber; name: string; account: string };
      })[];
      no: BigNumber;
    })[];
    0: { height: BigNumber; name: string; account: string };
    1: {
      counter: BigNumber;
      mother: { height: BigNumber; name: string; account: string };
      father: { height: BigNumber; name: string; account: string };
    };
    2: ({
      things: ({
        counter: BigNumber;
        mother: { height: BigNumber; name: string; account: string };
        father: { height: BigNumber; name: string; account: string };
      })[];
      no: BigNumber;
    })[];
  }>;

  owner(): Promise<{
    height: BigNumber;
    name: string;
    account: string;
    0: BigNumber;
    1: string;
    2: string;
  }>;

  increaseCounter(by: BigNumberish, overrides?: TransactionOverrides): Promise<ContractTransaction>;

  thing(): Promise<{
    counter: BigNumber;
    mother: { height: BigNumber; name: string; account: string };
    father: { height: BigNumber; name: string; account: string };
    0: BigNumber;
    1: { height: BigNumber; name: string; account: string };
    2: { height: BigNumber; name: string; account: string };
  }>;

  setStuff(
    _person: { height: BigNumberish; name: string; account: string },
    _thing: {
      counter: BigNumberish;
      mother: { height: BigNumberish; name: string; account: string };
      father: { height: BigNumberish; name: string; account: string };
    },
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    getCounter(offset: BigNumberish): Promise<BigNumber>;

    getStuff(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    increaseCounter(by: BigNumberish): Promise<BigNumber>;

    thing(): Promise<BigNumber>;

    setStuff(
      _person: { height: BigNumberish; name: string; account: string },
      _thing: {
        counter: BigNumberish;
        mother: { height: BigNumberish; name: string; account: string };
        father: { height: BigNumberish; name: string; account: string };
      },
    ): Promise<BigNumber>;
  };
}
