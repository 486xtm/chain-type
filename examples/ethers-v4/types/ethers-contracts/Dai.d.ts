/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface DaiInterface extends Interface {
  functions: {
    DOMAIN_SEPARATOR: TypedFunctionDescription<{ encode([]: []): string }>;

    PERMIT_TYPEHASH: TypedFunctionDescription<{ encode([]: []): string }>;

    allowance: TypedFunctionDescription<{
      encode([,]: [string, string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([usr, wad]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{ encode([]: [string]): string }>;

    burn: TypedFunctionDescription<{
      encode([usr, wad]: [string, BigNumberish]): string;
    }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    deny: TypedFunctionDescription<{ encode([guy]: [string]): string }>;

    mint: TypedFunctionDescription<{
      encode([usr, wad]: [string, BigNumberish]): string;
    }>;

    move: TypedFunctionDescription<{
      encode([src, dst, wad]: [string, string, BigNumberish]): string;
    }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    nonces: TypedFunctionDescription<{ encode([]: [string]): string }>;

    permit: TypedFunctionDescription<{
      encode([holder, spender, nonce, expiry, allowed, v, r, s]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        boolean,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    pull: TypedFunctionDescription<{
      encode([usr, wad]: [string, BigNumberish]): string;
    }>;

    push: TypedFunctionDescription<{
      encode([usr, wad]: [string, BigNumberish]): string;
    }>;

    rely: TypedFunctionDescription<{ encode([guy]: [string]): string }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transfer: TypedFunctionDescription<{
      encode([dst, wad]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([src, dst, wad]: [string, string, BigNumberish]): string;
    }>;

    version: TypedFunctionDescription<{ encode([]: []): string }>;

    wards: TypedFunctionDescription<{ encode([]: [string]): string }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([src, guy, wad]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    LogNote: TypedEventDescription<{
      encodeTopics([sig, usr, arg1, arg2, data]: [
        Arrayish | null,
        string | null,
        Arrayish | null,
        Arrayish | null,
        null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([src, dst, wad]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class Dai extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Dai;
  attach(addressOrName: string): Dai;
  deployed(): Promise<Dai>;

  on(event: EventFilter | string, listener: Listener): Dai;
  once(event: EventFilter | string, listener: Listener): Dai;
  addListener(eventName: EventFilter | string, listener: Listener): Dai;
  removeAllListeners(eventName: EventFilter | string): Dai;
  removeListener(eventName: any, listener: Listener): Dai;

  interface: DaiInterface;

  functions: {
    DOMAIN_SEPARATOR(): Promise<string>;

    PERMIT_TYPEHASH(): Promise<string>;

    allowance(arg0: string, arg1: string): Promise<BigNumber>;

    approve(
      usr: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string): Promise<BigNumber>;

    burn(
      usr: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    decimals(): Promise<number>;

    deny(
      guy: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    mint(
      usr: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    move(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    name(): Promise<string>;

    nonces(arg0: string): Promise<BigNumber>;

    permit(
      holder: string,
      spender: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      allowed: boolean,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    pull(
      usr: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    push(
      usr: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    rely(
      guy: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    symbol(): Promise<string>;

    totalSupply(): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    version(): Promise<string>;

    wards(arg0: string): Promise<BigNumber>;
  };

  DOMAIN_SEPARATOR(): Promise<string>;

  PERMIT_TYPEHASH(): Promise<string>;

  allowance(arg0: string, arg1: string): Promise<BigNumber>;

  approve(
    usr: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string): Promise<BigNumber>;

  burn(
    usr: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  decimals(): Promise<number>;

  deny(
    guy: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  mint(
    usr: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  move(
    src: string,
    dst: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  name(): Promise<string>;

  nonces(arg0: string): Promise<BigNumber>;

  permit(
    holder: string,
    spender: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    allowed: boolean,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  pull(
    usr: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  push(
    usr: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  rely(
    guy: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  symbol(): Promise<string>;

  totalSupply(): Promise<BigNumber>;

  transfer(
    dst: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  version(): Promise<string>;

  wards(arg0: string): Promise<BigNumber>;

  filters: {
    Approval(src: string | null, guy: string | null, wad: null): EventFilter;

    LogNote(
      sig: Arrayish | null,
      usr: string | null,
      arg1: Arrayish | null,
      arg2: Arrayish | null,
      data: null
    ): EventFilter;

    Transfer(src: string | null, dst: string | null, wad: null): EventFilter;
  };

  estimate: {
    DOMAIN_SEPARATOR(): Promise<BigNumber>;

    PERMIT_TYPEHASH(): Promise<BigNumber>;

    allowance(arg0: string, arg1: string): Promise<BigNumber>;

    approve(usr: string, wad: BigNumberish): Promise<BigNumber>;

    balanceOf(arg0: string): Promise<BigNumber>;

    burn(usr: string, wad: BigNumberish): Promise<BigNumber>;

    decimals(): Promise<BigNumber>;

    deny(guy: string): Promise<BigNumber>;

    mint(usr: string, wad: BigNumberish): Promise<BigNumber>;

    move(src: string, dst: string, wad: BigNumberish): Promise<BigNumber>;

    name(): Promise<BigNumber>;

    nonces(arg0: string): Promise<BigNumber>;

    permit(
      holder: string,
      spender: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      allowed: boolean,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish
    ): Promise<BigNumber>;

    pull(usr: string, wad: BigNumberish): Promise<BigNumber>;

    push(usr: string, wad: BigNumberish): Promise<BigNumber>;

    rely(guy: string): Promise<BigNumber>;

    symbol(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;

    transfer(dst: string, wad: BigNumberish): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish
    ): Promise<BigNumber>;

    version(): Promise<BigNumber>;

    wards(arg0: string): Promise<BigNumber>;
  };
}
